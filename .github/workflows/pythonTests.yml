name: Python Tests

on: [push, pull_request]

permissions:
  contents: read

jobs:

  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-python-versions.outputs.versions }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.11'

      - name: Cache, pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-a-dee-doo-dah
          restore-keys: pip-a-dee-doo-dah

      - run: pip install packaging requests

      - id: get-python-versions
        run: |
          python -c "
          import itertools, json, os, packaging.specifiers, packaging.version, pathlib, requests, tomllib
          listPythonVersions = [str(max(group))
            for _key, group in itertools.groupby(
              packaging.specifiers.SpecifierSet(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['requires-python']).filter(
                packaging.version.Version(item['version'])
            for item in requests.get(
              'https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json'
              ).json())
            , lambda V: V.release[0:-1])]

          with open(os.environ['GITHUB_OUTPUT'], 'a') as writeStream:
            writeStream.write(f'versions={json.dumps(listPythonVersions)}\n')
          "

  make-testbeds:
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache, pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-a-dee-doo-dah
          restore-keys: pip-a-dee-doo-dah

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package[testing]
        run: pip install ".[testing]"
      - run: pytest
