name: Python Tests

on: [push, pull_request]

permissions:
  contents: read

defaults:
  run:
    shell: cmd

jobs:

  getVersionsPython:
    runs-on: windows-latest
    outputs:
      python-versions: ${{ steps.getVersionsPython.outputs.versions }}

    steps:
      - uses: actions/checkout@v4
      - run: python -m pip install --upgrade pip
      - run: pip install packaging requests tomli
      - id: getVersionsPython
        run: |
          python -c "from packaging.specifiers import SpecifierSet; ^
          from packaging.version import Version; ^
          from pathlib import Path; ^
          import itertools, json, os, requests, tomli; ^
          specifications = SpecifierSet(tomli.loads(Path('pyproject.toml').read_text())['project']['requires-python']); ^
          listPythonVersions = [str(max(group)) for _key, group in itertools.groupby( ^
            specifications.filter(Version(item['version']) for item in requests.get( ^
              'https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json').json()) ^
            , lambda V: V.release[0:-1])]; ^
          os.environ['GITHUB_OUTPUT'] = 'versions=' + json.dumps(listPythonVersions)"

  make-testbeds:
    needs: getVersionsPython
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ${{fromJson(needs.getVersionsPython.outputs.python-versions)}}
    steps:
      - uses: actions/checkout@v4

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - run: python -m pip install --upgrade pip
      - run: pip install ".[testing]"
      - run: pytest
