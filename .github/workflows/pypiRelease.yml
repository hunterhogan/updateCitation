name: Make PyPI Release

on:
  workflow_run:
    workflows: ["Python Tests"]
    types: [completed]
  workflow_dispatch:
  release:
    types: [published, released]

permissions:
  contents: read

jobs:
  check-version:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      url: ${{ steps.check.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      - name: Get versionPackage and namePackage from Python Tests workflow
        id: use-project-info
        run: |
          versionPackage=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs | jq -r '.jobs[] | select(.name == "get-project-info") | .outputs.versionPackage')
          echo "versionPackage=$versionPackage" >> "$GITHUB_OUTPUT"
          namePackage=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs | jq -r '.jobs[] | select(.name == "get-project-info") | .outputs.namePackage')
          echo "namePackage=$namePackage" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.11'
      - name: Cache, pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-a-dee-doo-dah
          restore-keys: pip-a-dee-doo-dah

      - name: Check if version exists on PyPI
        id: check
        env:
          versionPackage: ${{ steps.use-project-info.outputs.versionPackage }}
          namePackage: ${{ steps.use-project-info.outputs.namePackage }}
        run: |
          python -c "
          import os, urllib.error, urllib.request

          versionPackage, namePackage = os.environ['versionPackage'], os.environ['namePackage']
          url = f'https://pypi.org/project/{namePackage}/{versionPackage}'

          try:
            urllib.request.urlopen(urllib.request.Request(url, method='HEAD'))
          except urllib.error.HTTPError as HTTPError:
            if HTTPError.code == 404:
              with open(os.environ['GITHUB_OUTPUT'], 'a') as appendStream:
                appendStream.write('should_publish=true\n')
                appendStream.write(f'url={url}\n')
          "

      - name: Build wheels and source dist
        if: steps.check.outputs.should_publish == 'true'
        run: |
          pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    needs: [check-version]
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: ${{ needs.check-version.outputs.url }}
    permissions:
      id-token: write
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc #v1.12.2
        with:
          packages-dir: dist/
